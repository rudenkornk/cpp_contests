name: Test workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  build_dir: build
  install_dir: build/install

jobs:
  main:
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019]
        build_type: [Debug, Release]
        toolchain: [gcc, llvm, msvc]
        generator: [ninja, vs]
        clang_tidy: [clang_tidy_off]
        code_coverage: [code_coverage_off]
        valgrind: [valgrind_off]
        exclude:
          - os: windows-2019
            toolchain: gcc

          - os: windows-2019
            generator: ninja

          - os: ubuntu-20.04
            toolchain: msvc

          - os: ubuntu-20.04
            generator: vs

          - os: ubuntu-20.04
            build_type: Debug
            clang_tidy: clang_tidy_off
            code_coverage: code_coverage_off
            valgrind: valgrind_off

        include:
          # clang_tidy
          - os: windows-2019
            build_type: Debug
            toolchain: msvc
            generator: ninja
            clang_tidy: clang_tidy_on
            code_coverage: code_coverage_off
            valgrind: valgrind_off

          # clang_tidy
          - os: ubuntu-20.04
            build_type: Debug
            toolchain: llvm
            generator: ninja
            clang_tidy: clang_tidy_on
            code_coverage: code_coverage_off
            valgrind: valgrind_off

          # code_coverage
          - os: ubuntu-20.04
            build_type: Debug
            toolchain: llvm
            generator: ninja
            clang_tidy: clang_tidy_off
            code_coverage: code_coverage_on
            valgrind: valgrind_off

          # code_coverage
          - os: ubuntu-20.04
            build_type: Debug
            toolchain: gcc
            generator: ninja
            clang_tidy: clang_tidy_off
            code_coverage: code_coverage_on
            valgrind: valgrind_off

          # valgrind
          - os: ubuntu-20.04
            build_type: Debug
            toolchain: gcc
            generator: ninja
            clang_tidy: clang_tidy_off
            code_coverage: code_coverage_off
            valgrind: valgrind_on

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOCKEN }}
    - name: Set environment
      run: |
        CLANG_TIDY=$([[ '${{ matrix.clang_tidy }}' == 'clang_tidy_on' ]] && echo ON || echo OFF)
        CODE_COVERAGE=$([[ '${{ matrix.code_coverage }}' == 'code_coverage_on' ]] && echo ON || echo OFF)
        VALGRIND=$([[ '${{ matrix.valgrind }}' == 'valgrind_on' ]] && echo ON || echo OFF)
        echo "BUILD_DIR=${{ env.build_dir }}" >> $GITHUB_ENV
        echo "BUILD_TYPE=${{ matrix.build_type }}" >> $GITHUB_ENV
        echo "GENERATOR=${{ matrix.generator }}" >> $GITHUB_ENV
        echo "INSTALL_PREFIX=${{ env.install_dir }}" >> $GITHUB_ENV
        echo "TOOLCHAIN=${{ matrix.toolchain }}" >> $GITHUB_ENV
        echo "CLANG_TIDY=$CLANG_TIDY" >> $GITHUB_ENV
        echo "CODE_COVERAGE=$CODE_COVERAGE" >> $GITHUB_ENV
        echo "LIT=ON" >> $GITHUB_ENV
        echo "PARALLEL=ON" >> $GITHUB_ENV
        echo "VALGRIND=$VALGRIND" >> $GITHUB_ENV
        echo "WARNINGS=ON" >> $GITHUB_ENV
        echo "DOCKER_ISOLATION=process" >> $GITHUB_ENV
    - name: Download and start container
      # See https://github.com/rudenkornk/docker_cpp
      # See https://github.com/rudenkornk/docker_cpp_windows
      run: make cpp_contests_container
    - name: Configure
      run: make in_docker TARGET=config
    - name: Build
      run: make in_docker TARGET=build
    - name: Test
      run: make in_docker TARGET=test
    - name: Install
      run: make in_docker TARGET=install
    - name: Test install
      run: make in_docker TARGET=test_install
    - name: Create package
      run: make in_docker TARGET=package

  lint:
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      matrix:
        fail-fast: [false]
        tool: [clang-format, clang-tidy]
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Set environment
      run: |
        echo "BUILD_DIR=${{ env.build_dir }}" >> $GITHUB_ENV
        echo "CLANG_FORMAT_OUTPUT=patch" >> $GITHUB_ENV
        echo "CLANG_TIDY_OUTPUT=patch" >> $GITHUB_ENV
        echo "COMMIT=HEAD^" >> $GITHUB_ENV
        echo "PARALLEL=ON" >> $GITHUB_ENV
    - name: Download and start container
      # See https://github.com/rudenkornk/docker_cpp
      run: make cpp_contests_container
    - name: Configure
      run: make in_docker TARGET=config
    - name: Run linter
      run: make in_docker TARGET=${{ matrix.tool }}
    - name: Check
      run: |
        if [ -s patch ]; then
          cat patch
          exit 1
        fi
