name: Test workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  build_dir: build

jobs:
  clang-format:
    name: clang-format
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-20.04
    container:
      image: rudenkornk/docker_cpp:0.1.3
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Workaround "unsafe repository" issue
      run: |
        # See also https://github.com/actions/checkout/issues/760
        git config --global --add safe.directory "$PWD"
    - name: Run clang-format for the patch
      run: |
        git diff -U0 --no-color --relative HEAD^ | clang-format-diff -p1 > clang-format.patch
        if [ -s clang-format.patch ]; then
          cat clang-format.patch
          exit 1
        fi

  clang-tidy:
    name: clang-tidy
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-20.04
    container:
      image: rudenkornk/docker_cpp:0.1.3
    env:
      cores: 2
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Workaround "unsafe repository" issue
      run: |
        # See also https://github.com/actions/checkout/issues/760
        git config --global --add safe.directory "$PWD"
    - name: Configure cmake
      run: |
        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -S . -B ${{ env.build_dir }}
    - name: Run clang-tidy
      run: |
        git diff -U0 --no-color --relative HEAD^ | clang-tidy-diff.py -j${{ env.cores }} -p1 -path ${{ env.build_dir }} -export-fixes clang-tidy.patch
        if [ -s clang-tidy.patch ]; then
          cat clang-tidy.patch
          exit 1
        fi

  build_linux:
    name: linux
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        toolchain: [gcc, llvm]
        build_type: [Debug, Release]
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOCKEN }}
    - name: Set environment
      run: |
        echo "makefile=makefile" >> $GITHUB_ENV
        echo "TOOLCHAIN=${{ matrix.toolchain }}" >> $GITHUB_ENV
        echo "BUILD_DIR=${{ env.build_dir }}" >> $GITHUB_ENV
        echo "PARALLEL=ON" >> $GITHUB_ENV
        echo "LIT=ON" >> $GITHUB_ENV
        echo "CODE_COVERAGE=OFF" >> $GITHUB_ENV
        echo "VALGRIND=OFF" >> $GITHUB_ENV
        echo "BUILD_TYPE=${{ matrix.build_type }}" >> $GITHUB_ENV
    - name: Download and start container
      run: make --file ${{ env.makefile }} cpp_contests_container
    - name: Configure cmake
      run: make --file ${{ env.makefile }} in_docker TARGET=config
    - name: Build
      run: make --file ${{ env.makefile }} in_docker TARGET=build
    - name: Test
      run: make --file ${{ env.makefile }} in_docker TARGET=test
    - name: Install
      run: make --file ${{ env.makefile }} in_docker TARGET=install

  build_windows:
    name: windows
    runs-on: windows-2019
    strategy:
      matrix:
        toolchain: [msvc, llvm]
        build_type: [debug, release]
    env:
      cores: 2
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: "Login to Docker Hub"
      # Container is private due to Visual Studio policy
      # But you can view source and compile it from
      # https://github.com/rudenkornk/docker_cpp_windows
      uses: docker/login-action@v1
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOCKEN }}
    - name: Set environment
      run: |
        if("${{ matrix.toolchain }}" -eq "msvc")
        { "toolset=v143" >> $env:GITHUB_ENV}
        elseif("${{ matrix.toolchain }}" -eq "llvm")
        { "toolset=ClangCL" >> $env:GITHUB_ENV}
        "DOCKER_ISOLATION=process" >> $env:GITHUB_ENV
        "make_in_docker=make --file makefile_windows in_docker DOCKER_COMMAND=" >> $env:GITHUB_ENV
    - name: Download and start container
      run: make --file makefile_windows cpp_contests_container
    - name: Configure cmake
      run: ${{ env.make_in_docker }}"cmake -DPARALLEL_TESTING=ON -DLIT=ON -S . -B ${{ env.build_dir }} -T ${{ env.toolset }}"
    - name: Build
      run: ${{ env.make_in_docker }}"cmake --build ${{ env.build_dir }} --config ${{ matrix.build_type }} --parallel ${{ env.cores }}"
    - name: Test
      run: ${{ env.make_in_docker }}"ctest --test-dir ${{ env.build_dir }} --parallel ${{ env.cores }} --verbose --build-config ${{ matrix.build_type }}"
