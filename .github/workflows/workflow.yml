name: Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  main:
    strategy:
      matrix:
        preset:
          - gcc_debug_san
          - gcc_debug_valgrind
          - gcc_release_tsan
          - llvm_debug_san
          - llvm_debug_valgrind
          - llvm_release_tsan

    runs-on: ubuntu-22.04
    container: ghcr.io/rudenkornk/cpp_ubuntu:22.0.17
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set safe repo
        run: git config --global --add safe.directory "$(realpath .)"

      - name: Set common environment
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install -r requirements.txt
          {
            echo "PARALLEL=$(nproc --all)"
            echo "PATH=$PATH"
            echo "VIRTUAL_ENV=$VIRTUAL_ENV"
            echo "CACHE=$HOME/.cache"
          } >> "$GITHUB_ENV"

      - name: Load cached dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE }}
          key: cache_ubuntu_22.04_${{ matrix.preset }}_{{ hashFiles('vcpkg.json') }}
          restore-keys: cache_ubuntu_22.04_${{ matrix.preset }}

      - name: Configure
        run: cmake -S . -B build --preset ${{ matrix.preset }}
      - name: Build
        run: cmake --build build --parallel "$PARALLEL" --verbose
      - name: Test
        run: ctest --test-dir build --parallel "$PARALLEL" --verbose
      - name: Install
        run: cmake --install build --prefix build/install --verbose
      - name: Test install
        run: |
          cmake -S build/test_install/ -B build/test_install/build  \
            --preset llvm_release -Dcpp_contests_DIR="$(realpath build/install/lib/cmake/cpp_contests/)"
          cmake --build build/test_install/build --parallel "$PARALLEL" --verbose
      - name: Create package
        run: cd build && cpack -C CPackConfig.cmake

      - name: Check format
        run: |
          cmake --build build --target format
          if [[ -n "$(git diff)" ]]; then echo "Code is not formatted."; git diff; exit 1; fi
