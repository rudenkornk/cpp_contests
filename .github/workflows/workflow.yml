name: Test workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  main:
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2022]
        build_type: [Debug, Release]
        toolchain: [gcc, llvm, msvc]
        asan: [asan_off]
        clang_tidy: [tidy_off]
        code_coverage: [cov_off]
        tsan: [tsan_off]
        ubsan: [ubsan_off]
        valgrind: [valg_off]
        exclude:
          - os: windows-2022
            toolchain: gcc

          - os: ubuntu-20.04
            toolchain: msvc

        include:
          # llvm + clang_tidy + asan + ubsan + code_coverage
          - os: ubuntu-20.04
            build_type: Debug
            toolchain: llvm
            asan: asan_on
            clang_tidy: tidy_on
            code_coverage: cov_on
            tsan: tsan_off
            ubsan: ubsan_on
            valgrind: valg_off

          # gcc + clang_tidy + asan + ubsan + code_coverage
          - os: ubuntu-20.04
            build_type: Debug
            toolchain: gcc
            asan: asan_on
            clang_tidy: tidy_on
            code_coverage: cov_on
            tsan: tsan_off
            ubsan: ubsan_on
            valgrind: valg_off

          # llvm + tsan
          - os: ubuntu-20.04
            build_type: Release
            toolchain: llvm
            asan: asan_off
            clang_tidy: tidy_off
            code_coverage: cov_off
            tsan: tsan_on
            ubsan: ubsan_off
            valgrind: valg_off

          # gcc + tsan
          - os: ubuntu-20.04
            build_type: Release
            toolchain: gcc
            asan: asan_off
            clang_tidy: tidy_off
            code_coverage: cov_off
            tsan: tsan_on
            ubsan: ubsan_off
            valgrind: valg_off

          # valgrind
          - os: ubuntu-20.04
            build_type: Debug
            toolchain: gcc
            asan: asan_off
            clang_tidy: tidy_off
            code_coverage: cov_off
            tsan: tsan_off
            ubsan: ubsan_off
            valgrind: valg_on

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOCKEN }}
    - name: Set environment
      run: |
        echo "BUILD_DIR=build" >> $GITHUB_ENV
        echo "BUILD_TYPE=${{ matrix.build_type }}" >> $GITHUB_ENV
        echo "INSTALL_PREFIX=build/install" >> $GITHUB_ENV
        echo "TOOLCHAIN=${{ matrix.toolchain }}" >> $GITHUB_ENV

        ASAN=$([[ '${{ matrix.asan }}' == 'asan_on' ]] && echo ON || echo OFF)
        CLANG_TIDY=$([[ '${{ matrix.clang_tidy }}' == 'tidy_on' ]] && echo ON || echo OFF)
        CODE_COVERAGE=$([[ '${{ matrix.code_coverage }}' == 'cov_on' ]] && echo ON || echo OFF)
        TSAN=$([[ '${{ matrix.tsan }}' == 'tsan_on' ]] && echo ON || echo OFF)
        UBSAN=$([[ '${{ matrix.ubsan }}' == 'ubsan_on' ]] && echo ON || echo OFF)
        VALGRIND=$([[ '${{ matrix.valgrind }}' == 'valg_on' ]] && echo ON || echo OFF)
        echo "ASAN=$ASAN" >> $GITHUB_ENV
        echo "CLANG_TIDY=$CLANG_TIDY" >> $GITHUB_ENV
        echo "CODE_COVERAGE=$CODE_COVERAGE" >> $GITHUB_ENV
        echo "LIT=ON" >> $GITHUB_ENV
        echo "PARALLEL=ON" >> $GITHUB_ENV
        echo "TSAN=$TSAN" >> $GITHUB_ENV
        echo "UBSAN=$UBSAN" >> $GITHUB_ENV
        echo "VALGRIND=$VALGRIND" >> $GITHUB_ENV
        echo "VERBOSE=ON" >> $GITHUB_ENV
        echo "WARNINGS=ON" >> $GITHUB_ENV

        echo "DOCKER_ISOLATION=process" >> $GITHUB_ENV
        echo "DOCKER_CONAN_CACHE=build/conan/data" >> $GITHUB_ENV
    - name: Load cached dependecies
      uses: actions/cache@v3
      with:
        path: ${{ env.DOCKER_CONAN_CACHE }}
        key: conan_${{ runner.os }}_${{ env.BUILD_TYPE }}_${{ env.TOOLCHAIN }}_asan-${{ env.ASAN }}_tsan-${{ env.TSAN }}_ubsan-${{ env.UBSAN }}_${{ hashFiles('scripts/conanfile.py') }}
        restore-keys: conan_${{ runner.os }}_${{ env.BUILD_TYPE }}_${{ env.TOOLCHAIN }}_asan-${{ env.ASAN }}_tsan-${{ env.TSAN }}_ubsan-${{ env.UBSAN }}
    - name: Download and start container
      # See https://github.com/rudenkornk/docker_cpp
      # See https://github.com/rudenkornk/docker_cpp_windows
      run: make container
    - name: Cache permissions workaround
      if: ${{ runner.os == 'Windows' }}
      run: |
          make in_docker DOCKER_ADMIN=true COMMAND="icacls $DOCKER_CONAN_CACHE /q /c /t /grant ContainerUser:F"
    - name: Install dependecies
      run: make in_docker TARGET=conan
    - name: Configure
      run: make in_docker TARGET=config
    - name: Build
      run: make in_docker TARGET=build
    - name: Test
      run: make in_docker TARGET=test
    - name: Install
      run: make in_docker TARGET=install
    - name: Test install
      run: make in_docker TARGET=test_install
    - name: Create package
      run: make in_docker TARGET=package

  lint:
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      fail-fast: false
      matrix:
        tool: [clang-format, clang-tidy]
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Set environment
      run: |
        echo "BUILD_DIR=build" >> $GITHUB_ENV
        echo "BUILD_TYPE=Release" >> $GITHUB_ENV
        echo "TOOLCHAIN=llvm" >> $GITHUB_ENV

        echo "ASAN=OFF" >> $GITHUB_ENV
        echo "CLANG_TIDY=ON" >> $GITHUB_ENV
        echo "PARALLEL=ON" >> $GITHUB_ENV
        echo "TSAN=OFF" >> $GITHUB_ENV
        echo "UBSAN=OFF" >> $GITHUB_ENV
        echo "VERBOSE=ON" >> $GITHUB_ENV
        echo "WARNINGS=ON" >> $GITHUB_ENV

        echo "CLANG_FORMAT_OUTPUT=patch" >> $GITHUB_ENV
        echo "CLANG_TIDY_OUTPUT=patch" >> $GITHUB_ENV
        echo "COMMIT=HEAD^" >> $GITHUB_ENV

        echo "DOCKER_ISOLATION=process" >> $GITHUB_ENV
        echo "DOCKER_CONAN_CACHE=build/conan/data" >> $GITHUB_ENV
    - name: Load cached dependecies
      uses: actions/cache@v3
      with:
        path: ${{ env.DOCKER_CONAN_CACHE }}
        key: conan_${{ runner.os }}_${{ env.BUILD_TYPE }}_${{ env.TOOLCHAIN }}_asan-${{ env.ASAN }}_tsan-${{ env.TSAN }}_ubsan-${{ env.UBSAN }}_${{ hashFiles('scripts/conanfile.py') }}
        restore-keys: conan_${{ runner.os }}_${{ env.BUILD_TYPE }}_${{ env.TOOLCHAIN }}_asan-${{ env.ASAN }}_tsan-${{ env.TSAN }}_ubsan-${{ env.UBSAN }}
    - name: Download and start container
      # See https://github.com/rudenkornk/docker_cpp
      run: make container
    - name: Install dependecies
      run: make in_docker TARGET=conan
    - name: Configure
      run: make in_docker TARGET=compile_commands
    - name: Run linter
      run: make in_docker TARGET=${{ matrix.tool }}
    - name: Check
      run: |
        if [ -s patch ]; then
          cat patch
          exit 1
        fi
