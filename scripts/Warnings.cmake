function(target_enable_warnings TARGET)
  if(NOT ${ARGC} EQUAL 1)
    message(FATAL_ERROR "Provide exactly one target")
  endif()
  if((CMAKE_CXX_COMPILER_ID MATCHES "Clang") OR (CMAKE_CXX_COMPILER_ID STREQUAL "GNU"))
    target_compile_options(${TARGET} PRIVATE -Wall -Wextra -pedantic -Werror)
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_options(${TARGET} PRIVATE /W4 /WX)
  endif()
endfunction()

function(target_disable_warnings TARGET)
  if(NOT ${ARGC} EQUAL 1)
    message(FATAL_ERROR "Provide exactly one target")
  endif()
  if((CMAKE_CXX_COMPILER_ID MATCHES "Clang") OR (CMAKE_CXX_COMPILER_ID STREQUAL "GNU"))
    get_target_property(target_options ${TARGET} COMPILE_OPTIONS)
    list(REMOVE_ITEM target_options -Wall -Wextra -pedantic -Werror)
    list(APPEND target_options -w)
    set_property(TARGET ${TARGET} PROPERTY COMPILE_OPTIONS ${target_options})
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    get_target_property(target_options ${TARGET} COMPILE_OPTIONS)
    list(REMOVE_ITEM target_options /W4 /WX)
    list(APPEND target_options /w)
    set_property(TARGET ${TARGET} PROPERTY COMPILE_OPTIONS ${target_options})
  endif()
endfunction()

function(enable_warnings)
  if((CMAKE_CXX_COMPILER_ID MATCHES "Clang") OR (CMAKE_CXX_COMPILER_ID STREQUAL "GNU"))
    add_compile_options(-Wall -Wextra -pedantic -Werror)
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_options(/W4 /WX)
  endif()
endfunction()
