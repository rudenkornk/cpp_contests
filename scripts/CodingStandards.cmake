define_property(TARGET PROPERTY WARNINGS_ENABLED)
define_property(GLOBAL PROPERTY WARNINGS_ENABLED)
define_property(TARGET PROPERTY CLANG_TIDY_ENABLED)
define_property(GLOBAL PROPERTY CLANG_TIDY_ENABLED)

function(target_enable_warnings TARGET)
  if(NOT ${ARGC} EQUAL 1)
    message(FATAL_ERROR "Provide exactly one target.")
  endif()
  if((CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU") OR (CMAKE_CXX_COMPILER_ID STREQUAL "GNU"))
    target_compile_options(${TARGET} PRIVATE -Wall -Wextra -pedantic -Werror)
  elseif((CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC") OR (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC"))
    target_compile_options(${TARGET} PRIVATE /W4 /WX)
  else()
    message(
      WARNING
        "Compiler with id \"${CMAKE_CXX_COMPILER_ID}\" and variant \"${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}\" is not implemented here. Warnings will not be enabled."
    )
  endif()
  set_property(TARGET ${TARGET} PROPERTY WARNINGS_ENABLED ON)
endfunction()

function(target_disable_warnings TARGET)
  if(NOT ${ARGC} EQUAL 1)
    message(FATAL_ERROR "Provide exactly one target.")
  endif()
  if((CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU") OR (CMAKE_CXX_COMPILER_ID STREQUAL "GNU"))
    get_target_property(target_options ${TARGET} COMPILE_OPTIONS)
    list(REMOVE_ITEM target_options -Wall -Wextra -pedantic -Werror)
    list(APPEND target_options -w)
    set_property(TARGET ${TARGET} PROPERTY COMPILE_OPTIONS ${target_options})
  elseif((CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC") OR (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC"))
    get_target_property(target_options ${TARGET} COMPILE_OPTIONS)
    list(REMOVE_ITEM target_options /W4 /WX)
    list(APPEND target_options /w)
    set_property(TARGET ${TARGET} PROPERTY COMPILE_OPTIONS ${target_options})
  endif()
  set_property(TARGET ${TARGET} PROPERTY WARNINGS_ENABLED OFF)
endfunction()

function(target_enable_clang_tidy TARGET)
  set_property(TARGET ${TARGET} PROPERTY CLANG_TIDY_ENABLED ON)
  set_property(TARGET ${TARGET} PROPERTY CXX_CLANG_TIDY clang-tidy)
endfunction()

function(enable_warnings)
  set_property(GLOBAL PROPERTY WARNINGS_ENABLED ON)
endfunction()

function(enable_clang_tidy)
  set_property(GLOBAL PROPERTY CLANG_TIDY_ENABLED ON)
endfunction()

function(target_enable_coding_standards TARGET)
  get_property(warnings_enabled GLOBAL PROPERTY WARNINGS_ENABLED)
  if(warnings_enabled)
    target_enable_warnings(${TARGET})
  endif()

  get_property(clang_tidy_enabled GLOBAL PROPERTY CLANG_TIDY_ENABLED)
  if(clang_tidy_enabled)
    target_enable_clang_tidy(${TARGET})
  endif()

endfunction()
